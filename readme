Git learning guide with examples (refer commit notes)
git config --global user.name xxxx
git config --global user.email ****@gmail.com
git remote add origin git@github.com:simpl-kart/applog-app.git <to add the remote repository link ssh/https>
git add . (to add the unstaged file)
git commit -m "command to commit the unstaged files in local" <commit the unstaged file "red" to staged file"green" in local>
git pull origin master <to pull the remote changes to local>
git push origin master <to push the local changes to remote repository>
git log --oneline <to get all the commit details in oneline>
git stash <to keep aside the unstaged files "red ones" when you want to merge the changes from remote without losing the local>
git stash list <list the stash ed files in local>
git stash apply <get the changed components back to unstaged area for commit after the auto merge of remote changes>
git reset --soft <delete the commit and put the changes in the staged area "green">
git reset --hard <physically deletes the commit and it cannot be reverted back - permanent delete of the commit>
git reset --mix <default one where it reset the commit and pull the upward commit date in unstaged "red" area of working directory>
git tag -a v1.0 4bca93 -m "version 1.0" <to give a tag to each commit to differentiate the versions of the developers code
git show <explains the changes done - fire git show v1.0 and it throws the difference with the preceeding commit point>
git clone < get the entire dump from remote when you start to develop as new user. If you one need the changes then its git pull>
git fetch <just show the difference if any between remote and local. It will not get the change like git pull>
git branch (branch name) <explains how branches are created and copying of master happens>
git checkout (branch name) <explains how to switch between master and other branches. In my example its feature/defect branch>
git merge branch name < merges any branch to master or any other branches>
git rebase master <before pushing any changes to master first the branch should be up to date with the master changes>
git merge feature --squash <squash will help push all modules of feature branch to master as one commit id whereas merge has commit ids for all modules in feature branch>
